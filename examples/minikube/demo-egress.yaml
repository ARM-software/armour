apiVersion: v1
kind: Namespace
metadata:
  name: armour
---
apiVersion: v1
kind: Service
metadata:
  name: client-service
  namespace: armour
spec:
  type: NodePort
  externalIPs:
    - 172.42.42.102
  ports:
  - name: client-port
    port: 80
    protocol: TCP
    targetPort: 80
  - name: armour-cli
    port: 32001
    nodePort: 32001
    protocol: TCP
    targetPort: 32001
  selector:
    app: client
---
apiVersion: v1
kind: Service
metadata:
  name: server-service
  namespace: armour
spec:
  type: NodePort
  externalIPs:
    - 172.42.42.102
  ports:
  - name: server-port
    port: 80
    protocol: TCP
    targetPort: 80
  - name: armour-srv
    port: 32000
    nodePort: 32000
    protocol: TCP
    targetPort: 32000
  selector:
    app: server
---
apiVersion: v1
kind: Pod
metadata:
  name: server
  namespace: armour
  labels:
    app: server
spec:
  initContainers:
  - name: armour-init
    image: armour-init
    imagePullPolicy: Never
    tty: true
    env:
      - name: INGRESS
        value: "6000"
      - name: EGRESS
        value: "6001"
      - name: APP
        value: "80"
    command: ["/bin/bash", "./iptables.sh"]
    securityContext:
      capabilities:
        add:
        - NET_ADMIN
      runAsUser: 0
  containers:
  - name: armour
    image: armour-proxy
    imagePullPolicy: Never
    tty: true
    env:
      - name: ARMOUR_PASS
        value: password
      - name: INGRESS
        value: "6000"
      - name: EGRESS
        value: "6001"
    command: ["/bin/bash", "-c"]
    args: ["./sc-egress.sh server & ./armour-host --label server-host -c 172.42.42.101:8088 -u 172.42.42.102:32000 -p 32000 --run cp"]
    securityContext:
      runAsUser: 1337
    ports:
    - containerPort: 6000
      name: proxy-in
    - containerPort: 6001
      name: proxy-eg
    - containerPort: 32000
      name: armour-port
    volumeMounts:
      - mountPath: /home/armour/certificates
        name: certificates
  - name: server
    image: nginx
    ports:
    - containerPort: 80
  volumes:
  - name: certificates
    hostPath:
      path: /vagrant/certificates
---
apiVersion: v1
kind: Pod
metadata:
  name: client
  namespace: armour
  labels:
    app: client
spec:
  initContainers:
  - name: armour-init
    image: armour-init
    imagePullPolicy: Never
    tty: true
    env:
      - name: INGRESS
        value: "6000"
      - name: EGRESS
        value: "6001"
      - name: APP
        value: "80"
    command: ["/bin/bash", "./iptables.sh"]
    securityContext:
      capabilities:
        add:
        - NET_ADMIN
      runAsUser: 0
  containers:
  - name: armour
    image: armour-proxy
    imagePullPolicy: Never
    tty: true
    env:
      - name: ARMOUR_PASS
        value: password
      - name: INGRESS
        value: "6000"
      - name: EGRESS
        value: "6001"
    command: ["/bin/bash", "-c"]
    args: ["./sc-egress.sh client & ./armour-host --label client-host -c 172.42.42.101:8088 -u 172.42.42.102:32001 -p 32001 --run cp"]
    securityContext:
      runAsUser: 1337
    ports:
    - containerPort: 6000
      name: proxy-in
    - containerPort: 6001
      name: proxy-eg
    - containerPort: 32001
      name: armour-port
    volumeMounts:
      - mountPath: /home/armour/certificates
        name: certificates
  - name: client
    image: nginx
    ports:
    - containerPort: 80
  volumes:
  - name: certificates
    hostPath:
      path: /vagrant/certificates
