fn verify_credentials(obd: OnboardingData) -> bool {
    obd.has_proposed_labels("Credentials::**")
}
//Âµ1
fn onboarding_policy(obd: OnboardingData) -> OnboardingResult {
    if verify_credentials(obd) {
        if obd.has_proposed_label('SecuredService') {
            if let Some(id) = ControlPlane::onboarded(obd) {
                OnboardingResult::ErrID("Endpoint already onboarded", id)
            } else {
                let id = ControlPlane::newID(obd);
                let id = id.add_label('TrustedService');                    
                let id = if obd.has_proposed_label('secured') { //Or Secured::secured_token to prove it
                    id.add_label('SecuredService');                    
                } else {
                    id
                };
                //At a crafted control plane ID
                let id = id.add_label('CP-id12');
                let id = id.add_label(Label::login_time(System::getCurrentTime()));
                let id = fold x in obd.proposed_labels() { acc.add_label(x) } where acc=id;
                if ControlPlane::onboard(id) {
                    let pol = get_policy(id);
                    OnboardingResult::Ok(id, pol.0, pol.1)            
                } else {
                    OnboardingResult::ErrID("Onboard failure", id)
                }
            }
        }
        else {
            OnboardingResult::ErrStr("")
        }
    } else {
        //Public service
        if let Some(id) = ControlPlane::onboarded(obd) {
            OnboardingResult::ErrID("Endpoint already onboarded", id)
        } else {
            let id = ControlPlane::newID(obd);
            let id = id.add_label('UntrustedService');
            let id = id.add_label(Label::login_time(System::getCurrentTime()));
            if ControlPlane::onboard(id) {
                let pol = get_policy(id);
                OnboardingResult::Ok(id, pol.0, pol.1)            
            } else {
                OnboardingResult::ErrID("Onboard failure", id)
            }
        }
    }
}