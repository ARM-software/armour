@startuml
title Service onboarding
actor "armour-compose" as ac 
participant "Armour Data Master" as dm 
participant "Armour Proxy" as proxy 
participant "Docker Engine" as de
participant "Armour Control Plane" as cp 

ac -> dm : onBoarding(service, meta) 
dm -> cp : onboardService(service, meta)
cp -> dm : updateID(id)
dm --> cp
cp -> dm : updatePolicy(id, pol)
dm --> cp
cp --> dm
dm --> ac
dm -> proxy : updatePolicy(pol)
proxy --> dm
ac -> de : startService(service)
de --> ac
@enduml

@startuml
title Armour data master onboarding
actor "operator" as op
participant "Armour Data Master" as dm 
participant "Armour Control Plane" as cp
participant "DB" as db 

op -> dm : $ armour-data-master -ip host-ip -cip ctrl-ip
dm -> cp : /data-master-onboard/{id: ID, cdb: cdbentials}
cp -> db : GET id
db --> cp : meta
cp -> cp : checkCdbentials (cdb, meta) -> token
cp -> db : SET id:token token
db --> cp
cp --> dm : token
dm --> op
@enduml

@startuml
title Data relations

class DataPlaneMaster {
	+ UID
	+ Host
	+ URL
	+ ControlPlane
	+ Proxies : set
	+ {method} /dataplane/onboard-service/{...}
	+ {method} /dataplane/update-policy/{...}
	+ {method} /dataplane/query-policy/{...}
}

class ControlPlane {
	+ UID
	+ Host
	+ URL
	+ DataPlaneMasters : set
	+ Services : set
	+ Policies : set
	+ {method} /controlplane/onboard-master/{...}
	+ {method} /controlplane/onboard-service/{...}
	+ {method} /controlplane/update-policy/{...}
	+ {method} /controlplane/query-policy/{...}
}

class Proxy {
	+ UID
	+ DataPlaneMaster
	+ Services : set
	+ Policies : set
	+ {method} /proxy/update-policy/{...}
	+ {method} /proxy/query-policy/{...}
}

class Service {
	+ UID
	+ Proxy
}

ControlPlane::DataPlaneMasters -right-> "1 .. *" DataPlaneMaster::UID
Proxy::DataPlaneMaster -->  DataPlaneMaster::UID
DataPlaneMaster::Proxies -right-> "1 .. *" Proxy::UID
Proxy::Services --> "1 .. *" Service::UID
DataPlaneMaster::Services --> "1 .. *" Service::UID
ControlPlane::Services --> "1 .. *" Service::UID
Service::Proxy --> Proxy::UID
@enduml
