external logger @ "log_sock" {
  fn log(_) -> ()
  fn connection(str, ID, ID) -> ()
}

// REST request allow/deny
fn require(req: HttpRequest, from: ID, to: ID) -> bool {
  logger::log("request", req);
  if let Some(date) = req.unique_header("date") {
     logger::connection(str::from_utf8(date), from, to)
  } else {
     logger::connection("-", from, to)
  };
  true
}

// TCP connection/deny
fn allow_connection(from: ID, to: ID) -> bool {
  logger::log("connection", from, to);
  true
}

//L3,L4
fn ingress(from: ID, to: ID) -> bool {
  logger::log("connection", from, to);
  let to_hosts = to.hosts();
  let from_hosts = from.hosts();
  let to_port = to.port();
  if "cloud" in to_hosts {
    "verify" in from_hosts || to_port == Some(80)
  } else if "verify" in to_hosts {
    "debug" in from_hosts
  } else {false}
}

//L7
fn test(req: HttpRequest, from: ID, to: ID) -> bool {
  logger::log("connection", from, to,"request",req);
  ingress(from, to) &&
  (req.path() == "public" && req.method() == "GET" && ("debug" in from.hosts())
  ||
  req.path() == "private" && ("verify" in from.hosts()))
}


// L3,L4
fn db_connection(from: ID, to: ID) -> bool {
  let from_hosts = from.hosts();
  let db_allowed = ["dbread", "dbwrite"];
  "mysql" in to.hosts() && to.port() == Some(3306) &&
  any from_host in from_hosts { from_host in db_allowed }
}
// L7
fn rest(req: HttpRequest, from: ID, to: ID) -> bool {
  db_connection(from, to) &&
  if "dbread" in from.hosts() {
    req.method() == "GET"
  } else {
    req.method() == "POST"
  }
}
