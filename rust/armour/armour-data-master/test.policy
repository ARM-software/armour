external logger @ "log_sock" {
//external logger @ "localhost:8081" {
  fn log(_) -> ()
  fn rest(i64, str, str, str, ID, ID) -> ()
  fn client_payload(i64, i64) -> ()
  fn server_payload(i64, i64) -> ()
  fn tcp(i64, ID, ID) -> ()
  fn tcp_stats(i64, i64, i64) -> ()
}

// REST request allow/deny
fn allow_rest_request(req: HttpRequest, from: ID, to: ID, n: i64) -> bool {
  // logger::log(req);
  let date = if let Some(date) = req.unique_header("date") {
     str::from_utf8(date)
  } else {
     "-"
  };
  async logger::rest(n, date, req.method(), req.path(), from, to);
  true
}

// REST client payload allow/deny
fn allow_client_payload(payload: data, from: ID, to: ID, n: i64) -> bool {
  async logger::client_payload(n, payload.len());
  true
}

// REST server payload allow/deny
fn allow_server_payload(payload: data, from: ID, to: ID, n: i64) -> bool {
  async logger::server_payload(n, payload.len());
  true
}

// REST response allow/deny
fn allow_rest_response(res: HttpResponse, from: ID, to: ID, n: i64) -> bool {
  async logger::log(res.header("date"));
  res.status() == 200
}

// TCP connection allow/deny
fn allow_tcp_connection(from: ID, to: ID, n: i64) -> bool {
  async logger::tcp(n, from, to);
  true
}

// called when TCP connection ends
fn on_tcp_disconnect(from: ID, to: ID, n: i64, sent: i64, received: i64) async {
  logger::tcp_stats(n, sent, received)
}
