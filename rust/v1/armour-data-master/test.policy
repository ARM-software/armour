external logger @ "log_sock" {
//external logger @ "localhost:8081" {
  fn log(_) -> ()
  fn ping(_) -> ()
  fn rest(i64, str, str, str, ID, ID) -> ()
  fn client_payload(i64, i64) -> ()
  fn server_payload(i64, i64) -> ()
  fn tcp(i64, ID, ID) -> ()
  fn tcp_stats(i64, i64, i64) -> ()
}

// REST request allow/deny
fn allow_rest_request(req: HttpRequest) -> bool {
  // logger::ping();
  // logger::log(req);
  let date = if let Some(date) = req.unique_header("date") {
     str::from_utf8(date)
  } else {
     "-"
  };
  let c = req.connection();
  let (from, to) = c.from_to();
  logger::rest(c.number(), date, req.method(), req.path(), from, to);
  true
}

// REST client payload allow/deny
fn allow_client_payload(payload: Payload) -> bool {
  async
  logger::client_payload(payload.connection().number(), payload.data().len());
  true
}

// REST server payload allow/deny
fn allow_server_payload(payload: Payload) -> bool {
  async
  logger::server_payload(payload.connection().number(), payload.data().len());
  true
}

// REST response allow/deny
fn allow_rest_response(res: HttpResponse) -> bool {
  // async logger::log(res.header("date"));
  res.status() == 200
}

// TCP connection allow/deny
fn allow_tcp_connection(c: Connection) -> bool {
  let (from, to) = c.from_to();
  async logger::tcp(c.number(), from, to);
  true
}

// called when TCP connection ends
fn on_tcp_disconnect(c: Connection, sent: i64, received: i64) async {
  logger::tcp_stats(c.number(), sent, received)
}
